$date
	Wed Dec  8 03:57:11 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module mips_cpu_bus_tb $end
$var wire 1 ! waitrequest $end
$var wire 32 " register_v0 [31:0] $end
$var wire 32 # memwritedata [31:0] $end
$var wire 1 $ memwrite $end
$var wire 32 % memreaddata [31:0] $end
$var wire 1 & memread $end
$var wire 32 ' mem_address [31:0] $end
$var wire 4 ( byteenable [3:0] $end
$var wire 1 ) active $end
$var reg 1 * clk $end
$var reg 1 + reset $end
$var integer 32 , resultfile [31:0] $end
$scope module RAMInst $end
$var wire 1 * clk $end
$var wire 32 - writedata [31:0] $end
$var wire 1 $ write $end
$var wire 32 . sim_address [31:0] $end
$var wire 1 & read $end
$var wire 4 / byteenable [3:0] $end
$var wire 32 0 address [31:0] $end
$var reg 32 1 readdata [31:0] $end
$var reg 1 ! waitrequest $end
$var integer 32 2 waitcycle [31:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 3 i [31:0] $end
$upscope $end
$upscope $end
$scope module cpuBusInst $end
$var wire 1 * clk $end
$var wire 32 4 memreaddata [31:0] $end
$var wire 32 5 memwritedata [31:0] $end
$var wire 1 + reset $end
$var wire 1 ! waitrequest $end
$var wire 32 6 zero_extended_immediate [31:0] $end
$var wire 3 7 tomult [2:0] $end
$var wire 5 8 toalu [4:0] $end
$var wire 1 9 threestate $end
$var wire 32 : sign_extended_immediate [31:0] $end
$var wire 5 ; shift [4:0] $end
$var wire 1 < regwrite $end
$var wire 32 = register_v0 [31:0] $end
$var wire 2 > regdst [1:0] $end
$var wire 32 ? reg_write_data [31:0] $end
$var wire 5 @ reg_write_address [4:0] $end
$var wire 5 A reg_source_2 [4:0] $end
$var wire 5 B reg_source_1 [4:0] $end
$var wire 5 C reg_dest [4:0] $end
$var wire 32 D read_reg_2 [31:0] $end
$var wire 32 E read_reg_1 [31:0] $end
$var wire 1 F pcwritecond $end
$var wire 1 G pcwrite $end
$var wire 2 H pcsource [1:0] $end
$var wire 32 I pc_value [31:0] $end
$var wire 32 J pc_address_in [31:0] $end
$var wire 6 K opcode [5:0] $end
$var wire 1 L muldivwrite $end
$var wire 1 $ memwrite $end
$var wire 1 M memtoreg $end
$var wire 1 & memread $end
$var wire 32 N mem_address [31:0] $end
$var wire 1 O jumpconen $end
$var wire 1 P jump $end
$var wire 26 Q jmp_address [25:0] $end
$var wire 1 R ir_write $end
$var wire 1 S iord $end
$var wire 32 T increment_pc [31:0] $end
$var wire 16 U immediate [15:0] $end
$var wire 6 V fncode [5:0] $end
$var wire 1 W condition $end
$var wire 3 X alusrcb [2:0] $end
$var wire 1 Y alusrca $end
$var wire 1 Z aluouten $end
$var wire 4 [ aluop [3:0] $end
$var wire 32 \ alu_result [31:0] $end
$var wire 32 ] alu_in_b [31:0] $end
$var wire 32 ^ alu_in_a [31:0] $end
$var reg 1 ) active $end
$var reg 32 _ alu_out [31:0] $end
$var reg 4 ` byteenable [3:0] $end
$var reg 1 a jumpcondreg $end
$var reg 32 b jumpdestreg [31:0] $end
$var reg 32 c mem_reg_current [31:0] $end
$var reg 32 d read_reg_a_current [31:0] $end
$var reg 32 e read_reg_b_current [31:0] $end
$var reg 3 f state [2:0] $end
$scope module cpu_alu $end
$var wire 32 g a [31:0] $end
$var wire 32 h b [31:0] $end
$var wire 1 * clk $end
$var wire 1 + reset $end
$var wire 1 L write $end
$var wire 5 i shift [4:0] $end
$var wire 3 j mult_op [2:0] $end
$var wire 32 k lo [31:0] $end
$var wire 32 l hi [31:0] $end
$var wire 1 W condition $end
$var wire 5 m alu_func [4:0] $end
$var reg 32 n result [31:0] $end
$scope module alu_mult $end
$var wire 32 o a [31:0] $end
$var wire 32 p b [31:0] $end
$var wire 1 * clk $end
$var wire 1 + reset $end
$var wire 1 L write $end
$var wire 1 q sign_b $end
$var wire 1 r sign_a $end
$var wire 3 s op [2:0] $end
$var reg 64 t div [63:0] $end
$var reg 64 u div_u [63:0] $end
$var reg 32 v hi [31:0] $end
$var reg 32 w lo [31:0] $end
$var reg 32 x mag_a [31:0] $end
$var reg 32 y mag_b [31:0] $end
$var reg 64 z mult [63:0] $end
$var reg 64 { mult_u [63:0] $end
$var reg 1 | sign_out $end
$var reg 32 } signed_a [31:0] $end
$var reg 32 ~ signed_b [31:0] $end
$var reg 32 !" unsigned_a [31:0] $end
$var reg 32 "" unsigned_b [31:0] $end
$upscope $end
$upscope $end
$scope module cpu_alu_control $end
$var wire 6 #" funct [5:0] $end
$var wire 4 $" aluOp [3:0] $end
$var reg 5 %" toAlu [4:0] $end
$var reg 3 &" toMult [2:0] $end
$upscope $end
$scope module cpu_control $end
$var wire 32 '" memoryadress [31:0] $end
$var wire 3 (" state [2:0] $end
$var wire 1 ! waitrequest $end
$var wire 5 )" regimm [4:0] $end
$var wire 6 *" opcode [5:0] $end
$var wire 6 +" fncode [5:0] $end
$var reg 4 ," aluop [3:0] $end
$var reg 1 Z aluouten $end
$var reg 1 Y alusrca $end
$var reg 3 -" alusrcb [2:0] $end
$var reg 4 ." byteenable [3:0] $end
$var reg 1 /" exec1 $end
$var reg 1 0" exec2 $end
$var reg 1 S iord $end
$var reg 1 R irwrite $end
$var reg 1 P jump $end
$var reg 1 O jumpconen $end
$var reg 1 & memread $end
$var reg 1 M memtoreg $end
$var reg 1 $ memwrite $end
$var reg 1 L muldivwrite $end
$var reg 2 1" pcsource [1:0] $end
$var reg 1 G pcwrite $end
$var reg 1 F pcwritecond $end
$var reg 2 2" regdst [1:0] $end
$var reg 1 < regwrite $end
$var reg 1 9 threestate $end
$upscope $end
$scope module cpu_instruction_register $end
$var wire 1 * clk $end
$var wire 1 R enable $end
$var wire 32 3" memory_output [31:0] $end
$var wire 3 4" state [2:0] $end
$var wire 5 5" source_2 [4:0] $end
$var wire 5 6" source_1 [4:0] $end
$var wire 5 7" shamt [4:0] $end
$var wire 26 8" jmp_address [25:0] $end
$var wire 16 9" immediate [15:0] $end
$var wire 6 :" funct [5:0] $end
$var wire 5 ;" dest [4:0] $end
$var wire 6 <" control_input [5:0] $end
$var reg 32 =" instruction [31:0] $end
$upscope $end
$scope module cpu_pc $end
$var wire 1 * clk $end
$var wire 1 G pcenable $end
$var wire 32 >" pcin [31:0] $end
$var wire 1 + reset $end
$var reg 32 ?" pcout [31:0] $end
$upscope $end
$scope module cpu_register_file $end
$var wire 1 * clk $end
$var wire 32 @" read_data_1 [31:0] $end
$var wire 32 A" read_data_2 [31:0] $end
$var wire 32 B" read_data_v0 [31:0] $end
$var wire 5 C" read_reg_1 [4:0] $end
$var wire 5 D" read_reg_2 [4:0] $end
$var wire 1 + reset $end
$var wire 3 E" state [2:0] $end
$var wire 1 9 threestate $end
$var wire 32 F" write_data [31:0] $end
$var wire 1 < write_enable $end
$var wire 5 G" write_reg [4:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 H" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 H"
bx G"
bx F"
b0 E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
b0 4"
b0 3"
b0 2"
b0 1"
00"
0/"
b0 ."
b0 -"
b0 ,"
bx +"
bx *"
bx )"
b0 ("
bx '"
bx &"
b0 %"
b0 $"
bx #"
bx ""
bx !"
bx ~
bx }
x|
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
xr
xq
bx p
bx o
bx n
b0 m
bx l
bx k
bx j
bx i
bx h
bx g
b0 f
bx e
bx d
bx c
bx b
0a
bx `
bx _
bx ^
bx ]
bx \
b0 [
0Z
0Y
b0 X
xW
bx V
bx U
bx T
0S
0R
bx Q
0P
0O
bx N
0M
0L
bx K
bx J
bx I
b0 H
0G
0F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
b0 >
bx =
0<
bx ;
bx :
09
b0 8
bx 7
b0xxxxxxxxxxxxxxxx 6
bx 5
b0 4
b1000000000000 3
b11 2
b0 1
bx 0
bx /
bx .
bx -
b10000000000000000000000000000011 ,
1+
0*
0)
bx (
bx '
0&
b0 %
0$
bx #
bx "
0!
$end
#10
1!
b10111111110000000000000000000100 J
b10111111110000000000000000000100 >"
b10111111110000000000000000000100 T
b10111111110000000000000000000100 ?
b10111111110000000000000000000100 F"
1|
b100000001000000000000000000000000 z
b10000000100000000000000000000 t
b1011111111000000000000000000000000 {
b101111111100000000000000000000 u
b100 y
b100 ""
b100 ~
0q
0W
b10111111110000000000000000000100 \
b10111111110000000000000000000100 n
b10111111110000000000000000000100 '"
b100 ]
b100 h
b100 p
b0 @
b0 G"
b1000000010000000000000000000000 x
b10111111110000000000000000000000 !"
b10111111110000000000000000000000 }
1r
b1 .
b0 :
b10111111110000000000000000000000 ^
b10111111110000000000000000000000 g
b10111111110000000000000000000000 o
b10111111110000000000000000000000 '
b10111111110000000000000000000000 0
b10111111110000000000000000000000 N
b0 K
b0 *"
b0 <"
b0 E
b0 @"
b0 B
b0 6"
b0 C"
b0 D
b0 A"
b0 A
b0 )"
b0 5"
b0 D"
b0 C
b0 ;"
b0 6
b0 U
b0 9"
b0 Q
b0 8"
b0 V
b0 #"
b0 +"
b0 :"
b0 ;
b0 i
b0 7"
1Z
b1 X
b1 -"
1&
0O
0G
1R
b0 "
b0 =
b0 B"
b10111111110000000000000000000000 I
b10111111110000000000000000000000 ?"
b0 ="
b0 k
b0 w
b0 l
b0 v
1)
b1 f
b1 ("
b1 4"
b1 E"
b0 c
b100000 H"
1*
#11
0+
#20
0*
#30
1O
1G
b10111111110000000000000000000100 _
b0 #
b0 -
b0 5
b0 e
b0 d
0!
b100100100001000010101101100111 %
b100100100001000010101101100111 1
b100100100001000010101101100111 4
b100100100001000010101101100111 3"
b1 2
1*
#40
0*
#50
b10111111110000001010110110100000 J
b10111111110000001010110110100000 >"
b1010110110011100 y
b1010110110011100 ""
b1010110110011100 ~
b100 @
b100 G"
b10111111110000001010110110100000 T
b1010110110011100 ]
b1010110110011100 h
b1010110110011100 p
b10111111110000001010110110100000 ?
b10111111110000001010110110100000 F"
b1010111001001001100110111111010100100110010000 z
b101111010111101 t
b100000100000100110011001000000101011011001110000 {
b10001101010111111 u
b1000000001111111111111111111100 x
b10111111110000000000000000000100 !"
b10111111110000000000000000000100 }
b10 .
b10101101100111 :
b10111111110000001010110110100000 \
b10111111110000001010110110100000 n
b10111111110000001010110110100000 '"
b10111111110000000000000000000100 ^
b10111111110000000000000000000100 g
b10111111110000000000000000000100 o
b10111111110000000000000000000100 '
b10111111110000000000000000000100 0
b10111111110000000000000000000100 N
b1001 K
b1001 *"
b1001 <"
b100 B
b100 6"
b100 C"
b100 A
b100 )"
b100 5"
b100 D"
b101 C
b101 ;"
b10101101100111 6
b10101101100111 U
b10101101100111 9"
b100001000010101101100111 Q
b100001000010101101100111 8"
b100111 V
b100111 #"
b100111 +"
b100111 :"
b1101 ;
b1101 i
b1101 7"
b11 X
b11 -"
0&
0G
0R
b10111111110000000000000000000100 I
b10111111110000000000000000000100 ?"
b100100100001000010101101100111 ="
b10 f
b10 ("
b10 4"
b10 E"
b100100100001000010101101100111 c
1*
#60
0*
#70
b10101101100111 y
b10101101100111 ""
b10101101100111 ~
b10101101100111 J
b10101101100111 >"
b10101101100111 ]
b10101101100111 h
b10101101100111 p
b10101101100111 T
b10101101100111 ?
b10101101100111 F"
0|
b0 z
b0 t
b0 {
b0 u
b0 x
b0 !"
b0 }
0r
b10101101100111 \
b10101101100111 n
b10101101100111 '"
b0 ^
b0 g
b0 o
b10 X
b10 -"
1Y
19
1<
1/"
b10111111110000001010110110100000 _
b11 f
b11 ("
b11 4"
b11 E"
1*
#80
0*
#90
0O
1!
b10111111110000000000000000001000 J
b10111111110000000000000000001000 >"
b100 y
b100 ""
b100 ~
b10111111110000000000000000001000 T
b100 ]
b100 h
b100 p
b10111111110000000000000000001000 ?
b10111111110000000000000000001000 F"
1|
b100000000111111111111111111110000 z
b10000000011111111111111111111 t
b1011111111000000000000000000010000 {
b101111111100000000000000000001 u
b1000000001111111111111111111100 x
b10111111110000000000000000000100 !"
b10111111110000000000000000000100 }
1r
b10111111110000000000000000001000 \
b10111111110000000000000000001000 n
b10111111110000000000000000001000 '"
b10111111110000000000000000000100 ^
b10111111110000000000000000000100 g
b10111111110000000000000000000100 o
b1 X
b1 -"
0Y
1&
09
0G
1R
0<
0/"
b10101101100111 E
b10101101100111 @"
b10101101100111 D
b10101101100111 A"
b1 f
b1 ("
b1 4"
b1 E"
b10101101100111 _
1*
#100
0*
#110
1O
1G
b10111111110000000000000000001000 _
b10101101100111 #
b10101101100111 -
b10101101100111 5
b10101101100111 e
b10101101100111 d
0!
b1000 %
b1000 1
b1000 4
b1000 3"
b1 2
1*
#120
0*
#130
b10111111110000000000000000101000 J
b10111111110000000000000000101000 >"
b100000 y
b100000 ""
b100000 ~
b0 @
b0 G"
b10111111110000000000000000101000 T
b100000 ]
b100000 h
b100000 p
b10111111110000000000000000101000 ?
b10111111110000000000000000101000 F"
b100000000111111111111111111100000000 z
b10000000011111111111111111 t
b1011111111000000000000000000100000000 {
b101111111100000000000000000 u
b1000000001111111111111111111000 x
b10111111110000000000000000001000 !"
b10111111110000000000000000001000 }
b11 .
b1000 :
b10111111110000000000000000101000 \
b10111111110000000000000000101000 n
b10111111110000000000000000101000 '"
b10111111110000000000000000001000 ^
b10111111110000000000000000001000 g
b10111111110000000000000000001000 o
b10111111110000000000000000001000 '
b10111111110000000000000000001000 0
b10111111110000000000000000001000 N
b0 K
b0 *"
b0 <"
b0 E
b0 @"
b0 B
b0 6"
b0 C"
b0 D
b0 A"
b0 A
b0 )"
b0 5"
b0 D"
b0 C
b0 ;"
b1000 6
b1000 U
b1000 9"
b1000 Q
b1000 8"
b1000 V
b1000 #"
b1000 +"
b1000 :"
b0 ;
b0 i
b0 7"
b11 X
b11 -"
0&
0G
0R
b10111111110000000000000000001000 I
b10111111110000000000000000001000 ?"
b1000 ="
b10 f
b10 ("
b10 4"
b10 E"
b1000 c
1*
#140
0*
#150
b10111111110000000000000000001000 ?
b10111111110000000000000000001000 F"
b0 z
bx t
b0 {
bx u
b0 y
b0 ""
b0 ~
b10111111110000000000000000001000 \
b10111111110000000000000000001000 n
b10111111110000000000000000001000 '"
b0 ]
b0 h
b0 p
b0 J
b0 >"
b0 T
b0 X
b0 -"
19
1P
b11 H
b11 1"
1/"
b10111111110000000000000000101000 _
b0 #
b0 -
b0 5
b0 e
b0 d
b11 f
b11 ("
b11 4"
b11 E"
1*
#160
0*
#170
0O
1!
b10111111110000000000000000001100 ?
b10111111110000000000000000001100 F"
b100000000111111111111111111100000 z
b10000000011111111111111111110 t
b1011111111000000000000000000100000 {
b101111111100000000000000000010 u
b100 y
b100 ""
b100 ~
b10111111110000000000000000001100 \
b10111111110000000000000000001100 n
b10111111110000000000000000001100 '"
b100 ]
b100 h
b100 p
b10111111110000000000000000001100 T
b1 X
b1 -"
1&
09
0P
b0 H
b0 1"
0G
1R
0/"
b1 f
b1 ("
b1 4"
b1 E"
b10111111110000000000000000001000 _
b0 b
1a
1*
#180
0*
#190
1O
1G
b10111111110000000000000000001100 _
0!
b111000100000101101100100000011 %
b111000100000101101100100000011 1
b111000100000101101100100000011 4
b111000100000101101100100000011 3"
b1 2
1*
#200
0*
#210
1q
b1001101111110100 y
b11111111111111110110010000001100 ""
b11111111111111110110010000001100 ~
b10 @
b10 G"
b11111111111111110110010000001100 T
b11111111111111110110010000001100 ]
b11111111111111110110010000001100 h
b11111111111111110110010000001100 p
b11111111111111110110010000001100 ?
b11111111111111110110010000001100 F"
1|
b0 z
b0 t
b0 {
b0 u
b0 x
b0 !"
b0 }
0r
b1 .
b11111111111111111101100100000011 :
b11111111111111110110010000001100 \
b11111111111111110110010000001100 n
b11111111111111110110010000001100 '"
b0 ^
b0 g
b0 o
b0 '
b0 0
b0 N
b1110 K
b1110 *"
b1110 <"
b10101101100111 E
b10101101100111 @"
b100 B
b100 6"
b100 C"
b10 A
b10 )"
b10 5"
b10 D"
b11011 C
b11011 ;"
b1101100100000011 6
b1101100100000011 U
b1101100100000011 9"
b100000101101100100000011 Q
b100000101101100100000011 8"
b11 V
b11 #"
b11 +"
b11 :"
b100 ;
b100 i
b100 7"
b11 X
b11 -"
0&
0G
0R
b11111111111111110110010000001100 J
b11111111111111110110010000001100 >"
b0 I
b0 ?"
b111000100000101101100100000011 ="
b10 f
b10 ("
b10 4"
b10 E"
0a
b111000100000101101100100000011 c
1*
#220
0*
#230
1/"
b11111111111111110110010000001100 _
b10101101100111 d
b11 f
b11 ("
b11 4"
b11 E"
1*
#240
0*
#250
10"
0/"
b100 f
b100 ("
b100 4"
b100 E"
1*
#260
0*
#270
b0 J
b0 >"
b0 T
bx t
bx u
b0 ?
b0 F"
0|
b0 y
b0 ""
b0 ~
0q
b0 \
b0 n
b0 '"
b0 ]
b0 h
b0 p
0Z
b0 X
b0 -"
0O
00"
0)
b0 f
b0 ("
b0 4"
b0 E"
1*
#280
0*
#290
1*
#300
0*
#310
1*
